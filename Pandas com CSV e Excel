#importar a biblioteca pandas
import pandas as pd

# ler arquivos csv dentro da mesma pasta do arquivo .py ou passando o path com r'
# possível inserir chaves de modificação para separadores
vendas_df = pd.read_csv(r"Contoso - Vendas - 2017.csv", sep=';')
# para ler detalhes sobre o arquivo inserido na variável
vendas_df.info()
# ou para exibir o dataframe apenas chamar a variável
vendas_df

#Temos um dataframe chamado vendas_df

#vendas_df['coluna_x'] -> uma lista com os valores da coluna_x (em formato dataframe, é um dataframe com 1 coluna só)
#vendas_df[0] -> NÃO FUNCIONA ASSIM PARA DATAFRAMES
#vendas_df[:3] -> pega até a linha de índice 3 do dataframe
#vendas_df[['coluna_x', 'coluna_y', 'coluna_z']] -> cria um novo dataframe com as colunas coluna_x, coluna_y e coluna_z
#vendas_df['coluna_x'][0] -> pega o item da 1ª linha da coluna coluna_x

#criando uma lista de clientes
lista_clientes = vendas_df['ID Cliente']
lista_clientes

#criando uma lista de produtos com a quantidade vendida
produtos_quantidade = vendas_df[['ID Produto', 'Quantidade Vendida', 'Quantidade Devolvida']]
produtos_quantidade

# é possível trabalhar com multiplas bases de dados
produtos_df = pd.read_csv(r"Contoso - Cadastro Produtos.csv", sep=';')
lojas_df = pd.read_csv(r"Contoso - Lojas.csv", sep=';')
clientes_df = pd.read_csv(r"Contoso - Clientes.csv", sep=';')

#usaremos o display para ver todos os dataframes
display(vendas_df)
display(produtos_df)
display(lojas_df)
display(clientes_df)

#às vezes precisaremos mudar o encoding. Possiveis valores para testar:
#encoding='latin1', encoding='ISO-8859-1', encoding='utf-8' ou então encoding='cp1252'

# quando trabalhando com um grande número de dados é necessário descartar informações desnecessárias, para isso utiliza-se o método .drop(['nome_coluna'])
# ao usar o método .drop() por padrão é usado o eixo de linhas, para mudar para colunas usa-se a chave axis=1, que por padrão é =0
clientes_df = clientes_df.drop(['Unnamed: 7', 'Unnamed: 8', 'Unnamed: 9', 'Unnamed: 10'], axis=1)
display(clientes_df)

# uma forma mais eficiente ao invés de remover o que não será usado pode ser coletar apenas o que irá ser utilizado. tudo vai depender da quantidade de informações necessárias para o seu projeto

clientes_df = clientes_df[['ID Cliente', 'E-mail']]
produtos_df = produtos_df[['ID Produto', 'Nome do Produto']]
lojas_df = lojas_df[['ID Loja', 'Nome da Loja']]

# por fim iremos mesclar as bases de dados que criamos com o método .merge() sendo necessário passar da seguinte forma:
# novo_dataframe = dataframe1.merge(dataframe2, on='coluna')

vendas_df = vendas_df.merge(produtos_df, on='ID Produto')
vendas_df = vendas_df.merge(lojas_df, on='ID Loja')
vendas_df = vendas_df.merge(clientes_df, on='ID Cliente')

display(vendas_df)
# para unir as colunas é necessário utilizar uma referência comum entre as duas dataframes, sendo assim pode ser necessário renomear alguma coluna
# para isso podemos utilizar o método .rename()
# vamos renomear a coluna de e-mails para ter um nome mais intuitivo

vendas_df = vendas_df.rename(columns={'E-mail':'E-mail do Cliente' })

# a partir daqui podemos dizer que nosso Dataframe vendas_df está pronto e que é possível realizar a análise dos seus dados

# realizando a análise de dados no Data Frame
# é possivel utilizar o método .value_counts() para ter ideia de quantas vezes um valor se repete no data frame

frequencia_clientes = vendas_df['E-mail do Cliente'].value_counts()
# desta forma é possível saber quantas vezes um mesmo cliente realizou uma transação ordenados do maior para o menor
# agora é possível realizar a plotagem deste dado com o pantas usando o método .plot()
# dependendo do tamanho da sua base de dados e da informação desejada é possível filtrar os dados a serem exibidos no gráfico, como por exemplo os 5 primeiros clientes
# além de também ser possível utilizar keywords da biblioteca do pandas para uma melhor exibição

frequencia_clientes[:5].plot(figsize=(15, 5), yticks=range(65, 81, 5))

# Avaliando qual loja mais vendeu:
# para realizar isso utilizaremos o método .groupby() para agrupar os valores repetidos e somar seus resultados
vendas_lojas = vendas_df.groupby('Nome da Loja').sum()

# utilizando o método sum para somar os valores iremos acabar somando valores que não trarão um resultado real em relação a outros dados (como IDs de clientes)
# sendo assim é necessário filtrar os resultados obtidos

vendas_lojas = vendas_lojas[['Quantidade Vendida']]

# agora que temos um dataframe filtrado, vamos ordena-lo

vendas_lojas = vendas_lojas.sort_values('Quantidade Vendida', ascending=False)

# fazendo a plotagem no gráfico com os 5 maiores

vendas_lojas[:5].plot(figsize=(15, 5))

# outra forma de pegar o valor e armazena-lo é utilizando os métodos .max() e .idxmax()
maior_valor = vendas_lojas['Quantidade Vendida'].max()
melhor_loja = vendas_lojas['Quantidade Vendida'].idxmax()
print(melhor_loja, maior_valor)

# calculando o percentual de devoluções:

qtde_vendida = vendas_df['Quantidade Vendida'].sum()
qtde_devolvida = vendas_df['Quantidade Devolvida'].sum()

print('{:.2%}'.format(qtde_devolvida / qtde_vendida))


# caso queiramos fazer este calculo em apenas uma das lojas:
# primeiros criamos um dataframe específico para a loja

vendas_contosoeuropeonline = vendas_df[vendas_df['ID Loja'] == 306]

# agora basta repetir a operação anterior para esta loja

qtde_vendida = vendas_contosoeuropeonline['Quantidade Vendida'].sum()
qtde_devolvida = vendas_contosoeuropeonline['Quantidade Devolvida'].sum()

print('{:.2%}'.format(qtde_devolvida / qtde_vendida))

# Criando uma tabela que NÃO inclui os valores de devolução em uma loja específica

loja306semdev = vendas_df[(vendas_df['ID Loja'] == 306) & (vendas_df['Quantidade Devolvida'] == 0)]
display(loja306semdev)


# agora vamos modificar o dataframe para fazer com que ele entenda melhor quais são as informações que estão nele.
# ao solicitar as informações do dataframe vendas_df.info() é possível ver que as colunas de data estão sendo informadas como objetos e queremos modificar isso

vendas_df['Data da Venda'] = pd.to_datetime(vendas_df['Data da Venda'], format='%d/%m/%Y')

# agora iremos inserir colunas no nosso dataframe com as informações que adquirmos usando o método datetime

vendas_df['Dia da Venda'] = vendas_df['Data da Venda'].dt.day
vendas_df['Mês da Venda'] = vendas_df['Data da Venda'].dt.month
vendas_df['Ano da Venda'] = vendas_df['Data da Venda'].dt.year
display(vendas_df)

# ao verificar como o nosso dataframe está será possível identificar as novas colunas
# agora podemos fazer a análise de dados em relação a períodos específicos

# modificando valores específicos: 
# primeiro vamos importar novamente a base de produtos para criar um novo dataframe

novo_produtos_df = pd.read_csv(r'Contoso - Cadastro Produtos.csv', sep=';')
display(novo_produtos_df.head())

# repare no método .head() que é o mesmo que fazer display(novo_produtos_df[:5]), mostrando os 5 primeiros produtos, o método .tail() faz o mesmo para os 5 ultimos

# antes de começar a modificar, vamos falar de 2 métodos. .loc() e .iloc()
# 1. loc - permite pegar uma linha de acordo com o índice dela. Também podemos usar como loc[índice_linha, índice_coluna] para acessar um valor específico e modificá-lo.
# 2. iloc - enxerga o dataframe como linhas e colunas e consegue pegar o valor com um número de linha e um número de coluna. Uso: iloc[num_linha, num_coluna]

# vamos pegar o preço produto Contoso Optical Wheel OEM PS/2 Mouse E60 Black
#por loc
print(novo_produtos_df.loc[0])
#por iloc
print(novo_produtos_df.iloc[2, 5])

# vamos fazer uma alteração no código para transformar a coluna do nome do produto em seu próprio índice

novo_produtos_df = novo_produtos_df.set_index('Nome do Produto')

# agora podemos passar o nome do produto para procurar um produto usando o método loc
print(novo_produtos_df.loc['Contoso Optical Wheel OEM PS/2 Mouse E60 Black', 'Preco Unitario'])
# vale ressaltar que após fazer esta alteração não será mais possível localizar o item pelo índice como antes

# vamos para o seguinte caso:
# A empresa decidiu aumentar o preço do produto ID 873 (Contoso Wireless Laser Mouse E50 Grey) para 23 reais.

# podemos fazer de duas formas
# por índice:
novo_produtos_df.loc['Contoso Wireless Laser Mouse E50 Grey', 'Preco Unitario'] = 23
# por critério:
novo_produtos_df.loc[novo_produtos_df['ID Produto'] == 873, 'Preco Unitario'] = 23


# Agora que o Dataframe foi construído e modificado, vamos exporta-lo para CSV usando o módulo .to_csv()
# Vamos passar o nome do arquivo, o formato e o separador utilizado

vendas_df.to_csv('Novo_Vendas_2017.csv', sep=';')

# caso queira criar o arquivo em outro local, basta passar o path do arquivo antes do nome do arquivo



# Trabalhando com dicionários no python e convertendo para csv
# Primeiramente vamos transformar o dicionário em um dataframe

vendas_produtos = {'iphone': [558147, 951642], 'galaxy': [712350, 244295], 'ipad': [573823, 26964], 'tv': [405252, 787604], 'máquina de café': [718654, 867660], 'kindle': [531580, 78830], 'geladeira': [973139, 710331], 'adega': [892292, 646016], 'notebook dell': [422760, 694913], 'notebook hp': [154753, 539704], 'notebook asus': [887061, 324831], 'microsoft surface': [438508, 667179], 'webcam': [237467, 295633], 'caixa de som': [489705, 725316], 'microfone': [328311, 644622], 'câmera canon': [591120, 994303]}

# neste dicionário as chaves são os produtos e os valores (uma lista de 2 valores) são as vendas de 2019 e 2020
# quando rodamos o seguinte código
vendas_produtos_df = pd.DataFrame.from_dict(vendas_produtos)

# as chaves se tornam as colunas e os valores são enfileirados em linhas, sendo o primeiro valor o índice 0 e o segundo valor o índice 1
# parar mudar a orientação dos valores (colunas x linhas) existem argumentos a serem passados no módulo

vendas_produtos_df = pd.DataFrame.from_dict(vendas_produtos, orient='index')

# desta forma o dataframe será criado usando a chave do dicionário como índice
# dando seguimento para a construção do nosso novo dataframe:
vendas_produtos_df = vendas_produtos_df.rename(columns={0: 'Vendas 2019', 1: 'Vendas 2020'})
vendas_produtos_df.to_csv('Vendas Produtos.csv', sep=';', encoding='latin1')




# Integraçao Python-Excel com Pandas e Openpyxl
# Vamos fazer a alteração de um dado em uma tabela de forma dinâmica entendendo a diferença entre os métodos
# O trabalho agora é atualizar o multiplicador do imposto de serviços de 30% para 50% (1,3 para 1,5)
# Pandas - Trabalha o excel como uma base de dados, faz o que quiser com o arquivo, pode desfazer a estrutura original do arquivo

import pandas as pd

tabela = pd.read_excel("Produtos.xlsx")
# atualizar o multiplicador
tabela.loc[tabela["Tipo"]=="Serviço", "Multiplicador Imposto"] = 1.5

# fazer a conta do Preço Base Reais
tabela["Preço Base Reais"] = tabela["Multiplicador Imposto"] * tabela["Preço Base Original"]

# Para salvar o arquivo
tabela.to_excel("ProdutosPandas.xlsx", index=False)

# Openpyxl - Trata o Excel como uma planilha, edit "como se fosse um VBA", menos eficiente, mantém estrutura original do arquivo
# Neste caso não iremos importar toda a biblioteca, mas apenas 2 métodos

from openpyxl import Workbook, load_workbook

planilha = load_workbook("Produtos.xlsx")

# No openpyxl é necessário descrever qual aba iremos trabalhar
aba_ativa = planilha.active

# referenciação de linhas e colunas também se dá de forma diferente, sendo usado o método de letras e números do excel
# iremos percorrer a coluna de definição com um FOR para realizar a modificação de forma condicional (IF)
for celula in aba_ativa["C"]:
    if celula.value == "Serviço":
        linha = celula.row
        aba_ativa[f"D{linha}"] = 1.5
        
# Vale ressaltar que utilizamos uma f string para definir a linha que iremos alterar

planilha.save("ProdutosOpenPy.xlsx")


# Já sabemos como extrair informações para a criação do Data Frame de várias fontes. Agora vamos voltar para o DF que criamos antes, o vendas_df
# Podemos criar uma barra de progresso para entender como um código atua em nosso dataframe. então vamos primeiro criar um código que percorre o dataframe por completo e altera apenas um dado da última linha.

for i, id_loja in enumerate(vendas_df['ID Loja']):
    if id_loja == 222:
        vendas_df.loc[i, 'Quantidade Devolvida'] +=1
        
display(vendas_df)

# Agora será possível ver que a "Quantidade Devolvida" da loja de ID 222 será aumentada em 1.

# Sendo assim, vamos importar o objeto 'tqdm' da biblioteca 'tqdm' para criar nossa barra de progresso
# Vamos escrever o mesmo código mas dessa vez inserindo os recursos importados

from tqdm import tqdm

pbar = tqdm(total=len(vendas_df['ID Loja']), position=0, leave=True)
# é inserido uma barra de progresso onde passamos o comprimento da nossa barra "total=len(vendas_df['ID Loja'])", a posição inicial "position=0" e como ela deve ser exibida em linha (ao invés de pular a linha) "leave=True"

for i, id_loja in enumerate(vendas_df['ID Loja']):
    pbar.update()
    # dentro do nosso FOR e fora do if vamos inserir uma atualização para a nossa barra
    if id_loja == 222:
        vendas_df.loc[i, 'Quantidade Devolvida'] +=1
        
display(vendas_df)

# a barra criada irá mostrar a porcentagem estabelecida do progresso, o tempo que já passou para a conclusão do programa, o tempo estimado e a quantidade de iterações por segundo realizadas pelo programa.
# desta forma nos é permitido usar esse recurso para descobrir quando formas diferentes de realizar uma ação podem ser otimizações reais do código.








