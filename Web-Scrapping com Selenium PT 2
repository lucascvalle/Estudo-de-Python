# Na segunda parte do Web-Scrapping com Selenium iremos começar com um processo de automatização de emissão de uma nota fiscal.
# Irei explicar passo a passo usando os arquivos do link: https://drive.google.com/drive/folders/1QxYWQUuFsETIh8ntXngQSQ0XPwTsq6Sy

# Nos arquivos em questão já está construída uma página que pode criar uma nota fiscal a partir de dados inseridos na página, então iremos fazer com que o programa escreva de forma automatizada todos os dados necessários para a emissão da nota.
# Vamos começar importando as bibliotecas necessárias:

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By

# Vamos definir algumas opções para poder fazer o download das notas ao final do código, uma vez que o navegador vai "se recusar" a fazer esse download caso não seja feita essa autorização
options = webdriver.ChromeOptions()
options.add_experimental_option("prefs", {
  "download.default_directory": r"C:\Users\lucascvalle\Desktop\Estudos\Python\Web-Scrapping com Selenium\Emissao de NFs\Notas", # Esse é o endereço da pasta onde quero que as notas sejam guardadas.
  "download.prompt_for_download": False,
  "download.directory_upgrade": True,
  "safebrowsing.enabled": True
})

servico = Service(ChromeDriverManager().install())
navegador = webdriver.Chrome(service=servico, options=options)

# Entrar na página de login (no nosso caso é login.html)
import os

caminho = os.getcwd()
arquivo = caminho + r"\login.html"
navegador.get(arquivo)

# Preencher o login e a senha
navegador.find_element(By.XPATH, '/html/body/div/form/input[1]').send_keys("email@seuemail.com")
navegador.find_element(By.XPATH, '/html/body/div/form/input[2]').send_keys("suasenha")

# Clicar no botao de fazer login
navegador.find_element(By.XPATH, '/html/body/div/form/button').click()

# Importar a base de clientes
import pandas as pd

tabela = pd.read_excel("NotasEmitir.xlsx") 
display(tabela)

# Para cada cliente - rodar o processo de emissao de nota fiscal
for linha in tabela.index:
    # preencher os dados da NF
    
    # nome/razao social
    navegador.find_element(By.NAME, 'nome').send_keys(tabela.loc[linha, "Cliente"])

    # endereco
    navegador.find_element(By.NAME, 'endereco').send_keys(tabela.loc[linha, "Endereço"])

    # bairro
    navegador.find_element(By.NAME, 'bairro').send_keys(tabela.loc[linha, "Bairro"])

    # municipio
    navegador.find_element(By.NAME, 'municipio').send_keys(tabela.loc[linha, "Municipio"])

    # cep
    navegador.find_element(By.NAME, 'cep').send_keys(str(tabela.loc[linha, "CEP"]))
    
    # UF
    navegador.find_element(By.NAME, 'uf').send_keys(tabela.loc[linha, "UF"])
    
    # CPF/CNPJ
    navegador.find_element(By.NAME, 'cnpj').send_keys(str(tabela.loc[linha, "CPF/CNPJ"]))

    # Inscricao estadual
    navegador.find_element(By.NAME, 'inscricao').send_keys(str(tabela.loc[linha, "Inscricao Estadual"]))

    # descrição
    texto = tabela.loc[linha, "Descrição"]
    navegador.find_element(By.NAME, 'descricao').send_keys(texto)

    # quantidade
    navegador.find_element(By.NAME, 'quantidade').send_keys(str(tabela.loc[linha, "Quantidade"]))

    # valor unitario
    navegador.find_element(By.NAME, 'valor_unitario').send_keys(str(tabela.loc[linha, "Valor Unitario"]))

    # valor total
    navegador.find_element(By.NAME, 'total').send_keys(str(tabela.loc[linha, "Valor Total"]))
    
    # clicar em emitir nota fiscal
    navegador.find_element(By.CLASS_NAME, 'registerbtn').click()
    
    # recarregar a página para limpar o formulário
    navegador.refresh()

# ---------------------------------------------------------------------------------------------------------

# Action Chains:
# As vezes quando visitamos alguma página, esta página possui uma "lista falsa" (Dropdown) que não é possível interagir diretamente, mais precisamente uma lista que aparece apenas sobrepondo o mouse sobre um botão.
# Analisando a estrutura html da página podemos até conseguir o Xpath de um dos itens que podem aparecer na lista em questão, porém provavelmente teremos um erro de ElementNotInteractableException.
# Sendo assim usaremos o ActionChains para resolver este problema:

# Importando:
from selenium.webdriver import ActionChains

# O ActionChains permitirá interagir com 2 elementos em cadeia, sendo assim precisamos definir os 2 elementos, o "menu" e o "item".

menu = navegador.find_element(By.XPATH, '//*[@id="menu-item-dropdown-16313"]')
item = navegador.find_element(By.XPATH, '//*[@id="menu-item-17042"]/a')

# Colocando o mouse em cima do menu:

ActionChains(navegador).move_to_element(menu).perform()

# Clicando no item:

item.click()

# ------------------------------------------------------------------------------------------------

# Alertas 

# Para lidar com alertas precisamos entender que há diferenças entre alertas e pop-ups. 
# Pop-ups fazem parte da estrutura da página, enquanto alertas são elementos do navegador.
# Usaremos os arquivos do link: https://drive.google.com/drive/folders/1XSKOhpKCK6uNWuhGX99VyCGwAblJfgsz 

# A página disponível possui 3 tipos de alertas, vamos primeiro "emitir" o alerta básico:

navegador.find_element(By.XPATH, '/html/body/div[1]/input').click()

# Agora iremos aceitar o alerta
# Existem duas formas, uma mais simples e outra mais "completa".
# A simples pode ser feita sem importar novas bibliotecas:

alerta = navegador.switch_to.alert
alerta.accept()

# A outra forma requer a importação da biblioteca Alert:

from selenium.webdriver.common.alert import Alert

alerta = Alert(navegador)
alerta.accept()

# Alerta de confirmação:

navegador.find_element(By.XPATH, '/html/body/div[2]/input').click()

alerta = Alert(navegador)

# Aceitar
alerta.accept()

# Cancelar
alerta.dismiss()

# Pegando o texto do alerta:

alerta = Alert(navegador)
texto = alerta.text
print(texto)

# Alerta com input:

navegador.find_element(By.XPATH, '/html/body/div[3]/button').click()

alerta = navegador.switch_to.alert
time.sleep(2)

alerta.send_keys('123123') # Lembre que ele funciona, apesar de não aparecer
alerta.accept()

# Trabalhando com Abas e Janelas diferentes:
# As vezes quando clicamos em elementos de uma página o navegador abre uma nova aba ou janela como resultado, entretanto é necessário descrever no código que iremos mudar a aba/janela que estamos usando.
# Vamos voltar para um código que já utilizamos anteriormente na primeira parte:

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By

servico = Service(ChromeDriverManager().install())
navegador = webdriver.Chrome(service=servico)

import os

caminho = os.getcwd()
arquivo = caminho + r"\Pagina Hashtag.html"
navegador.get(arquivo)

# Agora vamos clicar em um elemento que irá criar uma nova aba. 

navegador.find_element(By.XPATH, '/html/body/section[2]/div/div[4]/figure/a/img').click()

# O selenium não vai mudar de aba automaticamente e vai sempre por padrão continuar na mesma aba.
# Vamos mudar a aba:

aba_original = navegador.window_handles[0] # Quando utilizamos o método window.handles a indexação das abas se dá pela ordem em qual as abas foram abertas, independente da ordem que elas estabelecerem no navegador. 
nova_aba = navegador.window_handles[1]

# Criamos uma variável para cada aba e então fazemos a troca:

navegador.switch_to.window(nova_aba)

# Agora podemos selecionar elementos e interagir com eles dentro da nova aba.

navegador.find_element(By.ID, 'fullname').send_keys("Seu Nome")

# Ver os titulos de todas as abas
for aba in navegador.window_handles:
    navegador.switch_to.window(aba)
    print(navegador.title)
    
# Fechar a aba atualmente selecionada

navegador.close()

# Fechar todas as abas (navegador inteiro)

navegador.quit()

# Waits:
# Quando precisamos esperar que elementos da página carreguem podemos utilizar a biblioteca Time com o método sleep() para fazer isso de forma "bruta", entretanto é possível fazer isso importando 2 biblioteca do selenium.

# EC WebDriverWait
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

navegador.get("https://www.hashtagtreinamentos.com/") # Esta página possui um pop-up que aparece após cerca de 15 segundos que iremos fecha-la

elemento = WebDriverWait(navegador, 20).until(EC.presence_of_element_located((By.CLASS_NAME, 'eicon-close')))

elemento.click()

# Desta forma após abrir a página no navegador será identificado o "elemento" que só poderá ser fechado após ser devidamente identificado.
# A identificação do elemento acontece no momento que a condição .until() é atingida. A documentação do selenium possui outras formas de satisfazer essa condição.


# Agora iremos utilizar as nossas novas habilidades adquiridas para realizar um projeto de consulta jurídica:
# Para isso iremos utilizar os arquivos do link: https://drive.google.com/drive/folders/14ejEr0E1L8tfeYF5ytCxmxJrox-kEUcR
# Coloque todos os arquivos na mesma pasta

# Novamente vamos usar o código que abre o navegador e a página que está sala nos arquivos.

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By

servico = Service(ChromeDriverManager().install())
navegador = webdriver.Chrome(service=servico)

import os

caminho = os.getcwd()
arquivo = caminho + r"\index.html"

# Importar a base de dados
import pandas as pd

tabela = pd.read_excel("Processos.xlsx")
display(tabela)

from selenium.webdriver import ActionChains
import time

for linha in tabela.index:

    # Para cada processo (linha da tabela)
    navegador.get(arquivo)

    # abrir a lista de cidades
    botao = navegador.find_element(By.CLASS_NAME, 'dropdown-menu')
    ActionChains(navegador).move_to_element(botao).perform()
    
    cidade = tabela.loc[linha, "Cidade"]
    
    # Selecionando o cidade
    navegador.find_element(By.PARTIAL_LINK_TEXT, cidade).click()
    
    # Mudar para a nova aba
    aba_original = navegador.window_handles[0]
    indice = 1 + linha
    nova_aba = navegador.window_handles[indice]
    
    navegador.switch_to.window(nova_aba)
    
    # Preencher o formulário com os dados de busca
    navegador.find_element(By.ID, 'nome').send_keys(tabela.loc[linha, "Nome"])
    navegador.find_element(By.ID, 'advogado').send_keys(tabela.loc[linha, "Advogado"])
    navegador.find_element(By.ID, 'numero').send_keys(tabela.loc[linha, "Processo"])

    # Clicar em pesquisar
    navegador.find_element(By.CLASS_NAME, 'registerbtn').click()
    
    # Confirmar a pesquisa
    alerta = navegador.switch_to.alert
    alerta.accept()
    
    # Esperar o resultado da pesquisa e agir de acordo com o resultado
    while True:
        try:
            alerta = navegador.switch_to.alert
            break
        except:
            time.sleep(1)
    texto_alerta = alerta.text

    if "Processo encontrado com sucesso" in texto_alerta:
        alerta.accept()
        tabela.loc[linha, "Status"] = "Encontrado"
    else:
        tabela.loc[linha, "Status"] = "Não encontrado"
        alerta.accept()
        

navegador.quit()
display(tabela)

tabela.to_excel("Processos Atualizado.xlsx")
