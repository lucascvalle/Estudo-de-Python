# Vamos colocar aqui formas diferentes de usar SQL com Python usando bibliotecas como pyodbc, Pandas e tkinter. 
# Iremos trabalhar o conceito CRUD (Create, Read, Update and Delete)

# Primeiro vamos instalar a biblioteca do pyodbc e o driver necessário para SQL através do pip install pyodbc e do site: http://www.ch-werner.de/sqliteodbc/
# Após isso iremos conferir se o driver está devidamente instalado através do código:

import pyodbc
print(pyodbc.drivers())
# Isso irá mostrar todos os drivers de bancos de dados disponíveis em seu computador

# Importante: Será necessário "abrir a conexão" do banco de dados, entretanto é muito importante que façamos o fechamento dessa conexão sempre que ela for aberta
# Também é importante que você não faça a execução de abertura de conexão uma segunda vez caso o seu código tenha tido sucesso na primeira. 

# Abrindo a conexão: Vamos estabelecer passando 3 dados: Driver, Servidor e o Banco de dados

import pyodbc

dados_conexao = ('Driver={SQLite3 ODBC Driver};Server=localhost;Database=chinook.db')
conexao = pyodbc.connect(dados_conexao)

# Caso o banco de dados tenha login e senha, será preciso inserir nos dados o UID= e o PWD=

# Agora vamos criar o "cursor"

cursor = conexao.cursor()

# Fechando a conexão: Bastando fechar a conexão e o cursor, sempre lembre de faze-lo quando terminar de editar o código, pois do contrário a conexão pode ser bloqueada e isso pode limitar a edição da base de dados. 

cursor.close()
conexao.close()

# Considerando que você ainda não fechou sua conexão, a partir de agora já podemos escrever nossos comandos de SQL
# dataframe = pd.read_sql('COMANDO_SQL', conexao) -> vai executar o comando SQL, gerando uma consulta e retornando a resposta dessa consulta para o dataframe
# Para pegar uma tabela inteira do nosso banco de dados, usaremos o comando SQL Select *: "SELECT * FROM BaseDeDados.Tabela"

cursor.execute("SELECT * FROM customers")

# Agora as informações da tabela do banco de dados foram armazenadas em um "Objeto", para visualizar os valores iremos criar outra variável e extrair esses dados

valores = cursor.fetchall()

# Para exibir alguns dos valores obtidos: 

print(valores[:10])

# Uma vez que já vimos como estabelecer e encerrar a conexão, vamos agora passar pelos 4 pontos do CRUD (Create, Read, Update and Delete)

# Create:
# Após estabelecer a conexão e criar o cursor, podemos fazer a execução de comandos SQL, entretanto mais um passo é necessário para que a mudança feita seja concluída
# Outra dica de execução de comandos SQL é utilizar aspas triplas para mandar as informações em um bloco de texto de forma "mais organizada"
# Neste banco de dados de uma loja de discos vamos inserir o album Death Magnetic da banda Metallica na base de dados. Sabemos que a banda possui o ID de número 50

cursor.execute("""
INSERT INTO Albums (Title, ArtistID)
VALUES
('Death Magnetic', 50)
"""")

# Para concluir este terceiro passo é necessário utilizar o método .commit() em nosso cursor

cursor.commit()

# E o passo final é o fechamento do cursor e a conexão

cursor.close()
conexao.close()

# Agora podemos acessar o banco de dados através do DB Browser e ver que a alteração foi feita com sucesso.

# Read: 
# Agora vamos aprender a utilizar o Pandas para ler e importar informações do SQL.
# Relembrando que sempre iremos abrir a conexão, entretanto iremos importar duas bibliotecas e uma delas muda a forma como iremos estabelecer essa conexão

import pandas as pd
import sqlite3

conexao = sqlite3.connect("chinook.db")

# E iremos selecionar uma tabela dentro do banco de dados utilizando o pandas

tabela_clientes = pd.read_sql("SELECT * FROM customers", conexao)
# Já é possível ver o resultado utilizando o método display()
# A esta altura já é possível inclusive encerrar a conexão feita com o banco de dados, sendo que as informações atribuidas na variável continuarão lá

conexao.close()

# Agora é possível trabalhar no banco de dados utilizando o Pandas






