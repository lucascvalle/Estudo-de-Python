# Vamos agora aprender a transformar um código escrito em Python em um arquivo executável (.exe)
# Para isso vale ressaltar que utilizaremos ambientes virtuais e que, caso não tenha noção de como criar ou como funciona
# Temos um tópico específico (e bem curto) sobre isso aqui neste repositório.

# Existe uma grande diferença que teremos de dividir que é o grau de complexidade do código.
# Para códigos mais simples que roda apenas algumas bibliotecas que manipulam arquivos específicos utilizaremos um método que basicamente "converte o código".
# Para códigos mais complexos que envolvem abrir outros programas e até mesmo manipular eles (como Selenium com navegadores), precisamos usar uma versão "mais complexa".
# Temos de ter cuidado com "o que o programa faz", uma vez que a sua intenção é rodar em qualquer computador, temos que nos preocupar com o funcionamento do código em qualquer ambiente.


# Funcionamento:
# 1 - Seu código deve estar funcionando sem erros no jupyter
# 2 - Transformar o código jupyter em scripts python padrão (extensão .py). Seu código deve estar funcionando nesse formato também.
# 3 - Usar uma biblioteca de conversão (pyinstaller ou auto-py-to-exe) para transformar o código em executável.
# 4 - Testar e adaptar o que for necessário.

# Vamos começar instalando o pyinstaller e executando ele em seguida.
# Vou utilizar um código de outro repositório da integração do Python com APIs, em específico o código que integra com o twilio, uma API que faz o envio de mensagens (SMS) para números.

from twilio.rest import Client

account_sid = 'siddasuaconta'
token = 'tokendasuaconta'

client = Client(account_sid, token)

remetente = '+15673343563' # Este número pertence à minha conta do Twilio
destino = 'seunumero'

message = client.messages.create(
    to=destino, 
    from_=remetente,
    body="Atenção, Chico Butico, compareça à gerência.")

print(message.sid)

# Vamos primeiro rodar o código com o jupyter e ver que ele está rodando normalmente.
# Após isso vamos baixar o arquivo no formato .py, podemos fazer isso em File > Download e em seguida vamos conferir o seu funcionamento.
# Para isso vamos o prompt do anaconda, acessamoss a pasta one está o arquivo .py e fazemos o comando: python "nome do arquivo.py"
# Uma vez funcionando corretamente, vamos fazer a conversão para .EXE
# Garanta que o pyinstaller está instalado no computador através do pip install pyinstaller

# Ainda no prompt vamos rodar o seguinte código: pyinstaller -w "nome do arquivo.py"
# Muito provavel que o código demore bastante uma vez que ainda não criamos um ambiente virtual, o que significa que todos os recursos instalados no Python do seu computador também serão considerados para a transformação do código em .EXE
# Após o processo ser concluído, na pasta onde o código.py está salvo serão criados 2 pastas (build, dist) e 1 arquivo ("nome do arquivo.spec")
# Na pasta dist poderemos encontrar a versão de distribuição desse programa, um aplicativo com o "nome do arquivo.exe", ao ser executado ele irá fazer o mesmo que o código fez antes.
# Para compartilhar este programa basta agora que você faça uma .zip da pasta dist e compartilhe.

# Agora vamos fazer com o que o tamanho do arquivo final seja reduzido, para isso vamos criar um ambiente virtual com uma quantidade limitada de recursos e vamos realizar o mesmo processo.
# Vamos utilizar o mesmo arquivo que funciona em .py
# O ambiente virtual pode ser criado no prompt do anaconda:
# Acessamos o diretorio onde está o arquivo dentro do prompt 
# Criar o ambiente virtual
# Instalar as bibliotecas que iremos utilizar no programa
# Instalar novamente o pyinstaller no ambiente virtual
# Converter para EXE

# Percebemos que agora o programa irá demorar muito menos para compilar o programa, uma vez que ele possuirá uma quantidade significativamente menor de bibliotecas para inserir

# Quando se trata de programas mais complexos que puxam informações de outros arquivos precisamos fazer algumas coisas de uma forma diferente
# O programa coletará os links dos vídeos de uma lista de canais do Youtube fornecida pelo usuário:
# Utilizaremos um arquivo csv nesse programa: https://drive.google.com/file/d/1oxbozCzti_Z7He2qku_Ve9iWJM-j__o_/view

# Vamos importar uma quantidade considerável de bibliotecas:
import time, urllib
from IPython.display import display
from selenium import webdriver 
import pandas as pd 
import numpy as np
from selenium.webdriver.common.by import By 
from selenium.webdriver.support.ui import WebDriverWait 
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import StaleElementReferenceException
from tkinter import *
import tkinter.filedialog
from tkinter import messagebox

# Ler o arquivo csv:
# Como queremos que este programa funcione em "qualquer computador", vamos permitir que o usuário acesse o arquivo através de um pedido.

root= Tk()
arquivo = tkinter.filedialog.askopenfilename(title = "Selecione o Arquivo csv com Canais e Keywords")
root.destroy()

buscas_df = pd.read_csv(arquivo, encoding = 'ISO-8859-1', sep=';')
display(buscas_df.head())

# Agora vamos fazer com que o programa acesse a coluna de links dentro do arquivo e faça a coleta de links de vídeos dos canais.

buscas_canais = buscas_df.iloc[:,0]
driver = webdriver.Chrome() 

hrefs = []
delay = 5


# Pegando os itens dos canais
for canal in buscas_canais:
    if canal is np.nan:
        break
    hrefs.append(canal)
    driver.get(canal)
    try: # Esta linha é para pular o botão de aceitar os cookies
        driver.find_element(By.XPATH, '//*[@id="yDmH0d"]/c-wiz/div/div/div/div[2]/div[1]/div[3]/div[1]/form[2]/div/div/button').click() 
    except:
        pass
    time.sleep(2)
    myElem = WebDriverWait(driver, delay).until(EC.presence_of_element_located((By.XPATH, '//*[@id="tabsContent"]/tp-yt-paper-tab[2]'))) # Aguardar a aparição da coluna de vídeos
    time.sleep(2)
    tab = driver.find_element(By.XPATH, '//*[@id="tabsContent"]/tp-yt-paper-tab[2]').click() # Selecionar a coluna de vídeos
    time.sleep(2)
    altura = 0
    nova_altura = 1
    while nova_altura > altura:
            altura = driver.execute_script("return document.documentElement.scrollHeight")
            driver.execute_script("window.scrollTo(0, " + str(altura) + ");")
            time.sleep(3)
            nova_altura = driver.execute_script("return document.documentElement.scrollHeight")
    videos = driver.find_elements(By.ID, 'thumbnail')
    try:
        for video in videos:
            meu_link = video.get_attribute('href')
            if meu_link:
                if not 'googleadservices' in meu_link: 
                    hrefs.append(meu_link)
    except StaleElementReferenceException:
        time.sleep(2)
        videos = driver.find_elements(By.ID, 'thumbnail')
        for video in videos:
            meu_link = video.get_attribute('href')
            if meu_link:
                if not 'googleadservices' in meu_link: 
                    hrefs.append(meu_link)
    print('Pegamos {} vídeos do Canal {}'.format(len(videos), canal))

driver.quit()

# Salvando o resultado em um csv
hrefs_df = pd.DataFrame(hrefs)
hrefs_df.to_csv(r'Canais Prontos.csv', sep=',', encoding='utf-8')
root= Tk()
messagebox.showinfo("Programa Finalizado com Sucesso", "Seu arquivo csv foi gerado com sucesso na pasta do Programa") # Mostrando para o usuário que o programa foi executado
root.destroy()

# Agora que o programa está funcionando vamos baixar a versão .py do programa e tentar executa-lo por meio do prompt do anaconda.
# Desta vez iremos precisar de uma nova biblioteca: precisamos fazer o pip install auto-py-to-exe
# Agora no prompt do anaconda iremos rodar apenas o auto-py-to-exe
# Uma nova janela irá abrir, nessa janela iremos passar algumas informações:
# Em Script Location iremos passar o endereço do arquivo .py
# Em Additional Files vamos inserir o ChromeDriver que fica dentro da pasta do Python.
# Em Advanced iremos em --debug e iremos selecionar o imports.
# Por fim iremos conferir em Settings o local onde o programa será criado e clicamos em Convert


