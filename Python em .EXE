# Vamos agora aprender a transformar um código escrito em Python em um arquivo executável (.exe)
# Para isso vale ressaltar que utilizaremos ambientes virtuais e que, caso não tenha noção de como criar ou como funciona
# Temos um tópico específico (e bem curto) sobre isso aqui neste repositório.

# Existe uma grande diferença que teremos de dividir que é o grau de complexidade do código.
# Para códigos mais simples que roda apenas algumas bibliotecas que manipulam arquivos específicos utilizaremos um método que basicamente "converte o código".
# Para códigos mais complexos que envolvem abrir outros programas e até mesmo manipular eles (como Selenium com navegadores), precisamos usar uma versão "mais complexa".
# Temos de ter cuidado com "o que o programa faz", uma vez que a sua intenção é rodar em qualquer computador, temos que nos preocupar com o funcionamento do código em qualquer ambiente.


# Funcionamento:
# 1 - Seu código deve estar funcionando sem erros no jupyter
# 2 - Transformar o código jupyter em scripts python padrão (extensão .py). Seu código deve estar funcionando nesse formato também.
# 3 - Usar uma biblioteca de conversão (pyinstaller ou auto-py-to-exe) para transformar o código em executável.
# 4 - Testar e adaptar o que for necessário.

# Vamos começar instalando o pyinstaller e executando ele em seguida.
# Vou utilizar um código de outro repositório da integração do Python com APIs, em específico o código que integra com o twilio, uma API que faz o envio de mensagens (SMS) para números.

from twilio.rest import Client

account_sid = 'siddasuaconta'
token = 'tokendasuaconta'

client = Client(account_sid, token)

remetente = '+15673343563' # Este número pertence à minha conta do Twilio
destino = 'seunumero'

message = client.messages.create(
    to=destino, 
    from_=remetente,
    body="Atenção, Chico Butico, compareça à gerência.")

print(message.sid)

# Vamos primeiro rodar o código com o jupyter e ver que ele está rodando normalmente.
# Após isso vamos baixar o arquivo no formato .py, podemos fazer isso em File > Download e em seguida vamos conferir o seu funcionamento.
# Para isso vamos o prompt do anaconda, acessamoss a pasta one está o arquivo .py e fazemos o comando: python "nome do arquivo.py"
# Uma vez funcionando corretamente, vamos fazer a conversão para .EXE
# Garanta que o pyinstaller está instalado no computador através do pip install pyinstaller

# Ainda no prompt vamos rodar o seguinte código: pyinstaller -w "nome do arquivo.py"
# Muito provavel que o código demore bastante uma vez que ainda não criamos um ambiente virtual, o que significa que todos os recursos instalados no Python do seu computador também serão considerados para a transformação do código em .EXE
# Após o processo ser concluído, na pasta onde o código.py está salvo serão criados 2 pastas (build, dist) e 1 arquivo ("nome do arquivo.spec")
# Na pasta dist poderemos encontrar a versão de distribuição desse programa, um aplicativo com o "nome do arquivo.exe", ao ser executado ele irá fazer o mesmo que o código fez antes.
# Para compartilhar este programa basta agora que você faça uma .zip da pasta dist e compartilhe.

# Agora vamos fazer com o que o tamanho do arquivo final seja reduzido, para isso vamos criar um ambiente virtual com uma quantidade limitada de recursos e vamos realizar o mesmo processo.
# Vamos utilizar o mesmo arquivo que funciona em .py
# O ambiente virtual pode ser criado no prompt do anaconda:
# Acessamos o diretorio onde está o arquivo dentro do prompt 
# Criar o ambiente virtual
# Instalar as bibliotecas que iremos utilizar no programa
# Instalar novamente o pyinstaller no ambiente virtual
# Converter para EXE

# Percebemos que agora o programa irá demorar muito menos para compilar o programa, uma vez que ele possuirá uma quantidade significativamente menor de bibliotecas para inserir


