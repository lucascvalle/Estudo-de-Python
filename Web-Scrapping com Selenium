# Vamos começar a fazer o Web-Scrapping e para isso precisaremos instalar algumas ferramentas.
# Vale ressaltar que o navegador utilizado para isso será o Chrome, uma vez que é o navegador com a melhor compatibilidade para essa tarefa.
# Primeiro vamos instalar o Selenium com o "pip install selenium" ou "pip install selenium --upgrade" (para atualizar na versão mais recente) e o "pip install webdriver-manager"
# Agora faça o download do ChromeDriver no link: https://chromed"iver.chromium.org/downloads baseado na versão do seu navegador, utilize a versão mais aproximada.
# Remova o arquivo da pasta .zip e insira-o na mesma pasta onde está instalado o Python. 
# Caso tenha feito a instalação corretamente, ao rodar o código a seguir uma segunda instalação será feita e a janela do navegador irá aparecer com a mensagem de que esta é controlada de forma automatizada:

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

servico = Service(ChromeDriverManager().install())
navegador = webdriver.Chrome(service=servico)

# Agora que definimos o navegador podemos acessar um site utilizando o método .get()

navegador.get("https://www.microsoft.com/")

# Selecionando Objetos:
# Faça o download da página html que pode também ser acessada pelo Selenium através do Path, utilizarei a página local para evitar alterações no código:
# Link: https://drive.google.com/file/d/1ccAKYu9eWlrrenWJsaNcdyDttBSP1yBN/view?usp=share_link
# Pegando o arquivo na mesma pasta que o arquivo python.

import os

caminho = os.getcwd()
arquivo = caminho + r"\Pagina Hashtag.html"
navegador.get(arquivo)

# Seleção por ID: 
# Para descobrir o ID de um elemento da página iremos utilizar a tecla f12 no navegador Google Chrome ou com o botão direito do mouse na página e clicando em Inspecionar
# Uma nova janela vai abrir no seu navegador que no canto superior esquerdo da nova janera terá um botão de um ponteiro dentro de uma caixa, também pode ser acessado pelo atalho do teclado Shift + Ctrl + C
# O botão permitirá que você veja a referência do objeto na página ao posicionar o mouse sobre o elemento.
# No final da página existem duas caixas de texto para preenchimento de nome e e-mail, vamos verificar o ID de cada um destes elementos.
# Identificamos: <input type="text" id="fullname" name="fullname" placeholder="Seu primeiro nome" required="" data-name="fullname"> e <input type="text" id="email" name="email" placeholder="Seu melhor e-mail" required="" data-name="email">
# Vemos que o elemento possui Tipo, ID, nome, etc.
# Iremos coletar o ID de cada um destes elementos.
# Por último vamos identificar o botão de enviar: <button id="_form_176_submit" class="_submit" type="submit">Enviar</button>

# Agora que sabemos como identificar um elemento na página, vamos seleciona-lo através dos métodos find.element() que retorna 1 objeto e find.elements() que retorna uma lista.
# Para isso iremos importar a seguinte biblioteca:

from selenium.webdriver.common.by import By

navegador.find_element(By.ID, 'fullname').send_keys("Seu Nome")
navegador.find_element(By.ID, 'email').send_keys("seuemail@email.com")
navegador.find_element(By.ID, '_form_176_submit').click()

# Pronto! As caixas foram devidamente preenchidas e enviadas

# Seleção por Classe e XPATH:
# É possível que elementos na página não possuam um ID para identifica-lo, sendo assim se faz necessário o uso de outros médotos de seleção.
# Imagens são um exemplo muito comum de não possuir um ID, vamos começar selecionando a logo disponível na página pela Classe
# Utilizamos o mesmo método anterior para descobrir a classe da imagem. 

import os

caminho = os.getcwd()
arquivo = caminho + r"\Pagina Hashtag.html"
navegador.get(arquivo)

from selenium.webdriver.common.by import By

navegador.find_element(By.CLASS_NAME, 'custom-logo').click()

# Assim seremos direcionados para o link que estava atrelado à imagem da logo, no caso, a homepage da empresa que fornece o curso pelo qual eu estudo. 
# Ainda assim um elemento numa página pode fazer parte de uma classe onde outros elementos também estão atrelados, então iremos utilizar um terceiro método, o XPATH
# O XPATH é o caminho do elemento dentro da página baseando-se na estrutura XML do arquivo (Extended Markup Language), que é uma estrutura muito parecida com o HTML (Hypertext Markup Language)
# Para selecionar o XPATH de uma página, ao identificar onde o elemento fica com o método de seleção na página, podemos clicar com o botão direito e em "Copiar", na nova janela podemos "Copiar XPATH"
# Substituindo o método de classe por XPATH no exemplo anterior, ele fica assim:

from selenium.webdriver.common.by import By

navegador.find_element(By.XPATH, '//*[@id="header"]/div/div/div[1]/a/img').click()

# Vale ressltar: Dentro do XPATH existem textos com aspas duplas ("), sendo assim é recomendado definir o texto do Xpath sempre entre aspas simples (') para evitar conflitos.

# Outros métodos: Tag, Link Text e Name:
