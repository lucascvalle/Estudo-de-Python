# Vamos começar a fazer o Web-Scrapping e para isso precisaremos instalar algumas ferramentas.
# Vale ressaltar que o navegador utilizado para isso será o Chrome, uma vez que é o navegador com a melhor compatibilidade para essa tarefa.
# Primeiro vamos instalar o Selenium com o "pip install selenium" ou "pip install selenium --upgrade" (para atualizar na versão mais recente) e o "pip install webdriver-manager"
# Agora faça o download do ChromeDriver no link: https://chromed"iver.chromium.org/downloads baseado na versão do seu navegador, utilize a versão mais aproximada.
# Remova o arquivo da pasta .zip e insira-o na mesma pasta onde está instalado o Python. 
# Caso tenha feito a instalação corretamente, ao rodar o código a seguir uma segunda instalação será feita e a janela do navegador irá aparecer com a mensagem de que esta é controlada de forma automatizada:

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

servico = Service(ChromeDriverManager().install())
navegador = webdriver.Chrome(service=servico)

# Agora que definimos o navegador podemos acessar um site utilizando o método .get()

navegador.get("https://www.microsoft.com/")

# Selecionando Objetos:
# Faça o download da página html que pode também ser acessada pelo Selenium através do Path, utilizarei a página local para evitar alterações no código:
# Link: https://drive.google.com/file/d/1ccAKYu9eWlrrenWJsaNcdyDttBSP1yBN/view?usp=share_link
# Pegando o arquivo na mesma pasta que o arquivo python.

import os

caminho = os.getcwd()
arquivo = caminho + r"\Pagina Hashtag.html"
navegador.get(arquivo)

# Seleção por ID: 
# Para descobrir o ID de um elemento da página iremos utilizar a tecla f12 no navegador Google Chrome ou com o botão direito do mouse na página e clicando em Inspecionar
# Uma nova janela vai abrir no seu navegador que no canto superior esquerdo da nova janera terá um botão de um ponteiro dentro de uma caixa, também pode ser acessado pelo atalho do teclado Shift + Ctrl + C
# O botão permitirá que você veja a referência do objeto na página ao posicionar o mouse sobre o elemento.
# No final da página existem duas caixas de texto para preenchimento de nome e e-mail, vamos verificar o ID de cada um destes elementos.
# Identificamos: <input type="text" id="fullname" name="fullname" placeholder="Seu primeiro nome" required="" data-name="fullname"> e <input type="text" id="email" name="email" placeholder="Seu melhor e-mail" required="" data-name="email">
# Vemos que o elemento possui Tipo, ID, nome, etc.
# Iremos coletar o ID de cada um destes elementos.
# Por último vamos identificar o botão de enviar: <button id="_form_176_submit" class="_submit" type="submit">Enviar</button>

# Agora que sabemos como identificar um elemento na página, vamos seleciona-lo através dos métodos find.element() que retorna 1 objeto e find.elements() que retorna uma lista.
# Para isso iremos importar a seguinte biblioteca:

from selenium.webdriver.common.by import By

navegador.find_element(By.ID, 'fullname').send_keys("Seu Nome")
navegador.find_element(By.ID, 'email').send_keys("seuemail@email.com")
navegador.find_element(By.ID, '_form_176_submit').click()

# Pronto! As caixas foram devidamente preenchidas e enviadas

# Seleção por Classe e XPATH:
# É possível que elementos na página não possuam um ID para identifica-lo, sendo assim se faz necessário o uso de outros médotos de seleção.
# Imagens são um exemplo muito comum de não possuir um ID, vamos começar selecionando a logo disponível na página pela Classe
# Utilizamos o mesmo método anterior para descobrir a classe da imagem. 

import os

caminho = os.getcwd()
arquivo = caminho + r"\Pagina Hashtag.html"
navegador.get(arquivo)

from selenium.webdriver.common.by import By

navegador.find_element(By.CLASS_NAME, 'custom-logo').click()

# Assim seremos direcionados para o link que estava atrelado à imagem da logo, no caso, a homepage da empresa que fornece o curso pelo qual eu estudo. 
# Ainda assim um elemento numa página pode fazer parte de uma classe onde outros elementos também estão atrelados, então iremos utilizar um terceiro método, o XPATH
# O XPATH é o caminho do elemento dentro da página baseando-se na estrutura XML do arquivo (Extended Markup Language), que é uma estrutura muito parecida com o HTML (Hypertext Markup Language)
# Para selecionar o XPATH de uma página, ao identificar onde o elemento fica com o método de seleção na página, podemos clicar com o botão direito e em "Copiar", na nova janela podemos "Copiar XPATH"
# Substituindo o método de classe por XPATH no exemplo anterior, ele fica assim:

from selenium.webdriver.common.by import By

navegador.find_element(By.XPATH, '//*[@id="header"]/div/div/div[1]/a/img').click()

# Vale ressltar: Dentro do XPATH existem textos com aspas duplas ("), sendo assim é recomendado definir o texto do Xpath sempre entre aspas simples (') para evitar conflitos.

# Outros métodos: Tag, Link Text e Name:

# Por Tag: Como percebemos, na estrutura HTML existem tags que possuem chaves que definem a estrutura da página. Sendo assim é possível que objetos específicos possuam tags específicas.
# Desta forma é possível selecionar estes objetos "por tag", ou retornar até mesmo uma lista baseada em vários itens alocados em uma mesma tag.
# Selecionando o título: Ao olharmos a estrutura da página veremos que o título possui a tag "h2" (header), sendo o único com esta tag, iremos retornar apenas 1 elemento.

# Vamos considerar que o título de uma página é um texto, logo iremos armazena-lo em uma string de texto. O código fica assim:
from selenium.webdriver.common.by import By

titulo = navegador.find_element(By.TAG_NAME, 'h2').text
print(titulo)

# Por Link Text:
# Existe uma diferença quando vamos coletar um texto que está atrelado a um link. Um é o Link Text (texto inteiro) e o Partial Link Text (parte do texto)
# Caso saibamos apenas um trecho do texto ou queiramos retornar uma lista que possui um texto em comum, usaremos o By.PARTIAL_LINK_TEXT.
# Desta forma vaamos coletar o número de Whatsapp disponível na página:

from selenium.webdriver.common.by import By

numero_whatsapp = navegador.find_element(By.PARTIAL_LINK_TEXT, 'WhatsApp').text
print(numero_whatsapp)

# Por Name: Alguns campos possuem um "nome" atribuido que também é possível selecionar elementos baseados nesta estrutura:
# Vamos novamente preencher o formulário que foi feito primeiro, porém pelo name:

navegador.find_element(By.NAME, 'email').send_keys("seuemail@email.com").

# Selecionando vários elementos: 
# Utilizando o método find.elements(), ao invés de retornar um único elemento, retornaremos uma lista de elementos
# Iremos buscar todos os elementos que possuem a classe "nav-link", pois esta é a classe dos links e iremos identificar quantos elementos iremos encontrar.

links = navegador.find_elements(By.CLASS_NAME, 'nav-link')
print(len(links))

# Entretanto os elementos retornados pelo selenium não são "faceis" de identificar. Supondo que precisamos encontrar um elemento em específico dentro de uma lista, precisamos criar uma lógica capaz de identificar este elemento.
# Para isso iremos criar um loop FOR.
# Vamos tentar achar o link do Blog da página, para isso utilizaremos o texto "blog" para identificar quem a gente quer.

for link in links:
    if "blog" in link.text.lower():
        link.click()
        break
        
# Vamos reparar em alguns detalhes desse loop:
# Primeiro definimos a variável link dentro da lista links, depois procuramos pelo texto blog dentro dos elementos da lista e para evitar problemas com Case sensitive, pedimos que ele seja .lower()
# Por fim clicamos no elemento desejado e pedimos um break no loop, afinal, caso não seja feito o break o programa pode encontrar um erro mesmo com o código funcionando.

# Pegando texto de elementos:
# Ao analisar alguns elementos podemos querer pegar duas informações diferentes. Por exemplo em links, o texto clicável que direciona um link é diferente do próprio link.
# Sendo assim precisamos filtrar o nosso código quando se trata de extrair a informação de forma mais específica:
# Vejamos por exemplo o link de WhatsApp disponível na página:
# Para pegar seu texto:

texto = navegador.find_element(By.XPATH, '/html/body/footer/div/div[1]/div[2]/div/a[2]').text

# Agora vamos pegar o link, que no caso precisamos coletar o "atributo" da tag. 

link = navegador.find_element(By.XPATH, '/html/body/footer/div/div[1]/div[2]/div/a[2]').get_attribute('href')

# Em caso de imagens, a classe a tag <img> fica dentro de outra tag que faz a referência a um link, sendo assim, quando usamos o método de mostrar na página a partir do mouse, precisamos olhar na árvore html e procurar pelo 'href" da imagem e repetir o processo.
# Iremos coletar o link de cada imagem da página que direciona para um curso específico, todos de uma vez:
# Analisando a estrutura HTML da página, vamos reparar que todas as imagens estão definidas como child da tag <figure>, dentro da tag <figure> está a tag <a> com o atributo "href" definindo o link
# O conceito é analisar e identificar tags ou classes em comum das imagens.
# Logo o código fica assim:

lista_elementos = navegador.find_elements(By.TAG_NAME, 'figure')
print(len(lista_elementos))

# Se o código estiver correto, a quantidade de elementos desta lista será a mesma da quantidade de cursos anunciados, que é 6.
# Porém ainda precisamos coletar o link dessa imagem. Vamos escrever de forma que o código colete o link e evite imagens que não tenham o link:

for elemento in lista_elementos:
    try:
        link_curso = elemento.find_element(By.TAG_NAME, 'a').get_attribute('href')
        print(link_curso)
    except:
        continue
        
# Preenchendo formulários com selenium
# Existem vários tipos de botões e caixas diferentes quando estamos preenchendo formulários, aqui iremos usar o selenium em vários destes tipos.
# Para isso usaremos o formulário no link: https://drive.google.com/file/d/1MG41r_xsylxFUC95uurJi7_XNh6X28Zh/view
# Em resumo iremos utilizar o código desde o começo para abrir o navegador controlado pelo código e em seguida o código para cada etapa do formulário do link:
# A seleção dos elementos da página será feita por Xpath.

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By

servico = Service(ChromeDriverManager().install())
navegador = webdriver.Chrome(service=servico)

import os

caminho = os.getcwd()
arquivo = caminho + r"\formulario.html"
navegador.get(arquivo)

# Clicar no botão: O botão vai gerar um pop-up (alerta), então iremos usar o código para também clicar no pop-up após clicar no botão.

navegador.find_element(By.XPATH, '/html/body/form/input[1]').click()
alerta = navegador.switch_to.alert
alerta.accept()

# Ativar/Desativar checkbox:

navegador.find_element(By.XPATH, '/html/body/form/input[2]').click()

# Verificando se o botão está marcado: O print deve retornar como True.

valor = navegador.find_element(By.XPATH, '/html/body/form/input[2]').is_selected()
print(valor)

# Botão de seleção de cor:
# Independente de ser pedido em RGB, quando verificamos o valor do input do Botão de seleção de cor, o valor retorna em HEX, podemos verificar isso com o seguinte código:

valor = navegador.find_element(By.XPATH, '/html/body/form/input[4]').get_attribute("value")
print(valor)

# Sendo assim iremos passar o valor do vermelho RGB (232 33 33) em HEX para preenche-lo:
navegador.find_element(By.XPATH, '/html/body/form/input[4]').send_keys('#E82121')

# O botão abaixo segue o mesmo processo:
navegador.find_element(By.XPATH, '/html/body/form/input[5]').send_keys('#2143E8')

# Preenchendo data:
navegador.find_element(By.XPATH, '/html/body/form/input[6]').send_keys('15/02/1994')

# Preenchendo Data e hora: Neste caso o campo "ano" permite a inserção de mais um digito, o que impede de digitar diretamente, sendo necessário usar a tecla Tab para passar para o campo hora, sendo assim iremos importar uma biblioteca. 

from selenium.webdriver.common.keys import Keys

navegador.find_element(By.XPATH, '/html/body/form/input[7]').send_keys('15/02/1994', Keys.TAB, '22:00')

# Botão com seleção de arquivo e envio de arquivo com caminho completo

caminho = os.getcwd()
arquivo = caminho + r"\formulario.html"

navegador.find_element(By.XPATH, '/html/body/form/input[8]').send_keys(arquivo)

# Seleção de mês e ano

navegador.find_element(By.XPATH, '/html/body/form/input[9]').send_keys('janeiro', Keys.TAB, '1980')

# Campo númerico:
navegador.find_element(By.XPATH, '/html/body/form/input[10]').clear()
navegador.find_element(By.XPATH, '/html/body/form/input[10]').send_keys("123456")

# Campo de senha:

navegador.find_element(By.XPATH, '/html/body/form/input[11]').send_keys("123456")

# RadioButtons (É possível selecionar apenas 1)
# A localização do item é da mesma forma que é feita toda a seleção de todos os outros itens:

navegador.find_element(By.XPATH, '/html/body/form/input[13]').click()

# Slider
# Este é o caso "mais diferente" até então, então vamos tentar identificar como ele funciona identificando o seu valor:
valor = navegador.find_element(By.XPATH, '/html/body/form/input[15]').get_attribute('value')
print(valor)

# O código irá retornar um número, no caso, "50", pois o range (0 - 100) está no meio da barra. 
# Caso você mexa manualmente e verifique o valor, verá o valor sendo alterado para outro valor dentro da range.
# Vamos armazenar o nosso elemento numa variável e "limpa-lo", isso fará ele retornar para 50.
# Precisamos entender que não é possível digitar diretamente o valor através do send_keys, então o que faremos é "empurrar" a barra a quantidade de vezes necessária
# Sendo assim teremos duas soluções, uma para valores maiores que a metade, outra para valores menores que a metade.

elemento = navegador.find_element(By.XPATH, '/html/body/form/input[15]')

elemento.clear()
for i in range(70 - 50):
    elemento.send_keys(Keys.ARROW_RIGHT)
# Perceba que em valores maiores que a metade ele irá pegar o valor que desejamos (70) e irá subtrair o valor padrão (metade, 50), resultando em +20, que é a quantidade de vezes que ele irá empurrar a barra para a direita.
    
elemento.clear()
for i in range(50 - 30):
    elemento.send_keys(Keys.ARROW_LEFT)
# No caso contrário o conceito é o mesmo, mas o valor maior agora é a "metade" (50), sendo assim iremos subtrair o valor que desejamos atingir (30) para que o resultado seja a diferença (+20) e a quantidade de vezes que ele irá empurrar a seta para a esquerda.


# Caixa de Texto:

navegador.find_element(By.XPATH, '/html/body/form/input[16]').send_keys("Feijão")

# Caixa de horas:

navegador.find_element(By.XPATH, '/html/body/form/input[17]').send_keys('15:15')

# Caixa de Data personalizada (Semanal):

navegador.find_element(By.XPATH, '/html/body/form/input[18]').send_keys('17', '2005')

# Bloco de texto:

navegador.find_element(By.XPATH, '//*[@id="story"]').clear()
navegador.find_element(By.XPATH, '//*[@id="story"]').send_keys("Olá", Keys.ENTER, 'Sou lucascvalle, acesse meu github: https://github.com/lucascvalle', Keys.ENTER, 'Valeu')

# Selecionando itens em uma lista: 
# Podemos ver pela estrutura da página que não é necessário primeiro selecionar a caixa de seleção, não sendo possível selecionar diretamente o item da lista pelo Xpath.
# Sendo assim existem duas formas de selecionar um item numa caixa, o método de seleção e o método input.

navegador.find_element(By.XPATH, '/html/body/form/select[1]').send_keys('B')

# Conferindo o método de entrada:

valor = navegador.find_element(By.XPATH, '/html/body/form/select[1]').get_attribute('value')
print(valor)

# Em alguns casos a lista é baseada em HTML+JavaScript, então vamos usar o método de clicar na lista para selecionar o valor + biblioteca time, pois temos de esperar a lista "carregar":

import time
navegador.find_element(By.XPATH, '/html/body/form/select[1]').click()
time.sleep(0.5)
navegador.find_element(By.XPATH, '/html/body/form/select[1]/option[3]').click()

# Além de clicar utilizaremos o Select do selenium, este método permite que você também selecione listas suspensas:
# Quando olhamos para a estrutura da página HTML podemos identificar os elementos <select>, que são os "alvos" do método que iremos importar agora.
# No link da documentação do selenium tem mais detalhes: https://www.selenium.dev/pt-br/documentation/webdriver/elements/select_lists/
# Iremos selecionar o elemento da página por Tag <select>, uma vez que esta é a única: 

from selenium.webdriver.support.select import Select

elemento = navegador.find_element(By.TAG_NAME, 'select')
elemento_select = Select(elemento)

# Criamos uma nova variável para definir o select do nosso elemento e agora podemos usar os métodos específicos como posição, índice e texto do elemento:
# Índice:

elemento_select.select_by_index(0)

# Texto ou Valor: Lembrando que são dois métodos diferentes, podemos ver essa diferença quando olhamos a estrutura HTML da página onde é possível identificar o valor e o texto visível na mesma linha.
# Texto: 

elemento_select.select_by_visible_text('B')

# Valor:

elemento_select.select_by_value('c')

# Por fim vamos ler o item selecionado:

item = elemento_select.first_selected_options
print(item)









